use crate::ast::{Arg, File, Instruction, Metadata, Node};
use crate::base;
use crate::base::arith::Const;
use crate::base::Symmetries;
use std::str::FromStr;
use std::vec::Vec;

grammar;

match {
    // Literals:
    r"[_a-z][_a-zA-Z]*",
    r#""[^"]*""#,
    r"0b[01]+",
    r"[1-9][0-9]+|[0-9]",
    r"0x[0-9a-fA-F]+",
    r"[+-][1-9][0-9]+|[+-][0-9]",
    r"NONE|000L|090L|R180L|R270L|R000R|R090R|R180R|R270R|ALL",

    // Symbols:
    "|",
    ",",
    ":",

    // Metadata:
    ".name",
    ".symbol",
    ".desc",
    ".author",
    ".license",
    r"\.radius [0-4]",
    ".bgcolor",
    ".fgcolor",
    ".symmetries",
    ".field",
    ".parameter",

    // Instructions:
    "nop",
    "exit",
    "swapsites",
    "setsite",
    "setfield",
    "setsitefield",
    "getsite",
    "getfield",
    "getsitefield",
    "gettype",
    "getparameter",
    "scan",
    "savesymmetries",
    "usesymmetries",
    "restoresymmetries",
    "push0",
    "push1",
    "push2",
    "push3",
    "push4",
    "push5",
    "push6",
    "push7",
    "push8",
    "push9",
    "push10",
    "push11",
    "push12",
    "push13",
    "push14",
    "push15",
    "push16",
    "push17",
    "push18",
    "push19",
    "push20",
    "push21",
    "push22",
    "push23",
    "push24",
    "push25",
    "push26",
    "push27",
    "push28",
    "push29",
    "push30",
    "push31",
    "push32",
    "push33",
    "push34",
    "push35",
    "push36",
    "push37",
    "push38",
    "push39",
    "push40",
    "push",
    "pop",
    "dup",
    "over",
    "swap",
    "rot",
    "call",
    "ret",
    "checksum",
    "add",
    "sub",
    "neg",
    "mod",
    "mul",
    "div",
    "less",
    "lessequal",
    "or",
    "and",
    "xor",
    "equal",
    "bitcount",
    "bitscanforward",
    "bitscanreverse",
    "lshift",
    "rshift",
    "jump",
    "jumprelativeoffset",
    "jumpzero",
    "jumpnonzero",
    "setpaint",
    "getpaint",

    // Skip whitespace and comments:
    r"\s*" => {},
    r";[^\n\r]*[\n\r]*" => {}, // `; comment`
}

Ident: &'input str = <s:r"[_a-z][_a-zA-Z]*"> => s;

String: &'input str = <s:r#""[^"]*""#> => &s[1..s.len()-1];

BinNum: Const = <s:r"0b[01]+"> => Const::from_str_radix(&s[2..], 2).unwrap();

DecNum: Const = <s:r"[1-9][0-9]+|[0-9]"> => Const::from_str_radix(s, 10).unwrap();

HexNum: Const = <s:r"0x[0-9a-fA-F]+"> => Const::from_str_radix(&s[2..], 16).unwrap();

SignedNum: Const = <s:r"[+-][1-9][0-9]+|[+-][0-9]"> => Const::from_str_radix(s, 10).unwrap();

ConstExpr: Const = {
    BinNum,
    DecNum,
    HexNum,
    SignedNum,
}

Symmetry: Symmetries = {
    <s:r"NONE|000L|090L|R180L|R270L|R000R|R090R|R180R|R270R|ALL"> => Symmetries::from_str(s).unwrap(),
}

Symmetries: Symmetries = {
    <s:Symmetry> => s,
    <s:Symmetry> "|" <ss:Symmetries> => s | ss,
}

pub Metadata: Node<'input> = {
    ".name" <i:String> => Node::Metadata(Metadata::Name(i)),
    ".symbol" <i:String> => Node::Metadata(Metadata::Symbol(i)),
    ".desc" <i:String> => Node::Metadata(Metadata::Desc(i)),
    ".author" <i:String> => Node::Metadata(Metadata::Author(i)),
    ".license" <i:String> => Node::Metadata(Metadata::License(i)),
    <p:r"\.radius [0-4]"> => Node::Metadata(Metadata::Radius(u8::from_str(&p[8..]).unwrap())),
    ".bgcolor" <i:String> => Node::Metadata(Metadata::BgColor(i)),
    ".fgcolor" <i:String> => Node::Metadata(Metadata::FgColor(i)),
    ".symmetries" <s:Symmetries> => Node::Metadata(Metadata::Symmetries(s)),
    ".field" <i:Ident> "," <o:r"[1-9][0-9]+|[0-9]"> "," <n:r"[1-9][0-9]+|[0-9]"> => Node::Metadata(
        Metadata::Field(i, base::FieldSelector{
            offset: u8::from_str(o).unwrap(),
            length: u8::from_str(n).unwrap(),
        })),
    ".parameter" <i:Ident> <c:ConstExpr> => Node::Metadata(Metadata::Parameter(i, c)),
}

Label: Node<'input> = <i:Ident> ":" => Node::Label(i);

pub Instruction: Node<'input> = {
    "nop" => Node::Instruction(Instruction::Nop),
    "exit" => Node::Instruction(Instruction::Exit),
    "swapsites" => Node::Instruction(Instruction::SwapSites),
    "setsite" => Node::Instruction(Instruction::SetSite),
    "setfield" <i:Ident> => Node::Instruction(Instruction::SetField(Arg::Ast(i))),
    "setsitefield" <i:Ident> => Node::Instruction(Instruction::SetSiteField(Arg::Ast(i))),
    "getsite" => Node::Instruction(Instruction::GetSite),
    "getfield" <i:Ident> => Node::Instruction(Instruction::GetField(Arg::Ast(i))),
    "getsitefield" <i:Ident> => Node::Instruction(Instruction::GetSiteField(Arg::Ast(i))),
    "gettype" <i:String> => Node::Instruction(Instruction::GetType(Arg::Ast(i))),
    "getparameter" <i:Ident> => Node::Instruction(Instruction::GetParameter(Arg::Ast(i))),
    "scan" => Node::Instruction(Instruction::Scan),
    "savesymmetries" => Node::Instruction(Instruction::SaveSymmetries),
    "usesymmetries" <s:Symmetries> => Node::Instruction(Instruction::UseSymmetries(s)),
    "restoresymmetries" => Node::Instruction(Instruction::RestoreSymmetries),
    "push0" => Node::Instruction(Instruction::Push0),
    "push1" => Node::Instruction(Instruction::Push1),
    "push2" => Node::Instruction(Instruction::Push2),
    "push3" => Node::Instruction(Instruction::Push3),
    "push4" => Node::Instruction(Instruction::Push4),
    "push5" => Node::Instruction(Instruction::Push5),
    "push6" => Node::Instruction(Instruction::Push6),
    "push7" => Node::Instruction(Instruction::Push7),
    "push8" => Node::Instruction(Instruction::Push8),
    "push9" => Node::Instruction(Instruction::Push9),
    "push10" => Node::Instruction(Instruction::Push10),
    "push11" => Node::Instruction(Instruction::Push11),
    "push12" => Node::Instruction(Instruction::Push12),
    "push13" => Node::Instruction(Instruction::Push13),
    "push14" => Node::Instruction(Instruction::Push14),
    "push15" => Node::Instruction(Instruction::Push15),
    "push16" => Node::Instruction(Instruction::Push16),
    "push17" => Node::Instruction(Instruction::Push17),
    "push18" => Node::Instruction(Instruction::Push18),
    "push19" => Node::Instruction(Instruction::Push19),
    "push20" => Node::Instruction(Instruction::Push20),
    "push21" => Node::Instruction(Instruction::Push21),
    "push22" => Node::Instruction(Instruction::Push22),
    "push23" => Node::Instruction(Instruction::Push23),
    "push24" => Node::Instruction(Instruction::Push24),
    "push25" => Node::Instruction(Instruction::Push25),
    "push26" => Node::Instruction(Instruction::Push26),
    "push27" => Node::Instruction(Instruction::Push27),
    "push28" => Node::Instruction(Instruction::Push28),
    "push29" => Node::Instruction(Instruction::Push29),
    "push30" => Node::Instruction(Instruction::Push30),
    "push31" => Node::Instruction(Instruction::Push31),
    "push32" => Node::Instruction(Instruction::Push32),
    "push33" => Node::Instruction(Instruction::Push33),
    "push34" => Node::Instruction(Instruction::Push34),
    "push35" => Node::Instruction(Instruction::Push35),
    "push36" => Node::Instruction(Instruction::Push36),
    "push37" => Node::Instruction(Instruction::Push37),
    "push38" => Node::Instruction(Instruction::Push38),
    "push39" => Node::Instruction(Instruction::Push39),
    "push40" => Node::Instruction(Instruction::Push40),
    "push" <c:ConstExpr> => Node::Instruction(Instruction::Push(c)),
    "pop" => Node::Instruction(Instruction::Pop),
    "dup" => Node::Instruction(Instruction::Dup),
    "over" => Node::Instruction(Instruction::Over),
    "swap" => Node::Instruction(Instruction::Swap),
    "rot" => Node::Instruction(Instruction::Rot),
    "call" <i:Ident> => Node::Instruction(Instruction::Call(Arg::Ast(i))),
    "ret" => Node::Instruction(Instruction::Ret),
    "checksum" => Node::Instruction(Instruction::Checksum),
    "add" => Node::Instruction(Instruction::Add),
    "sub" => Node::Instruction(Instruction::Sub),
    "neg" => Node::Instruction(Instruction::Neg),
    "mod" => Node::Instruction(Instruction::Mod),
    "mul" => Node::Instruction(Instruction::Mul),
    "div" => Node::Instruction(Instruction::Div),
    "less" => Node::Instruction(Instruction::Less),
    "lessequal" => Node::Instruction(Instruction::LessEqual),
    "or" => Node::Instruction(Instruction::Or),
    "and" => Node::Instruction(Instruction::And),
    "xor" => Node::Instruction(Instruction::Xor),
    "equal" => Node::Instruction(Instruction::Equal),
    "bitcount" => Node::Instruction(Instruction::BitCount),
    "bitscanforward" => Node::Instruction(Instruction::BitScanForward),
    "bitscanreverse" => Node::Instruction(Instruction::BitScanReverse),
    "lshift" => Node::Instruction(Instruction::LShift),
    "rshift" => Node::Instruction(Instruction::RShift),
    "jump" <i:Ident> => Node::Instruction(Instruction::Jump(Arg::Ast(i))),
    "jumprelativeoffset" => Node::Instruction(Instruction::JumpRelativeOffset),
    "jumpzero" <i:Ident> => Node::Instruction(Instruction::JumpZero(Arg::Ast(i))),
    "jumpnonzero" <i:Ident> => Node::Instruction(Instruction::JumpNonZero(Arg::Ast(i))),
    "setpaint" => Node::Instruction(Instruction::GetPaint),
    "getpaint" => Node::Instruction(Instruction::GetPaint),
}

FileHeader: Vec<Node<'input>> = {
    <vs:Metadata*> => vs,
}

FileLine: Node<'input> = {
    <l:Label> => l,
    <i:Instruction> => i,
}

FileBody: Vec<Node<'input>> = {
    <vs:FileLine*> => vs,
}

pub File: File<'input> = {
    <a:FileHeader> <b:FileBody> => File{
        header: a,
        body: b,
    },
}