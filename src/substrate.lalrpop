use crate::ast::{Arg, File, Instruction, Metadata, Node};
use crate::base;
use crate::base::arith::Const;
use crate::base::Symmetries;
use std::str::FromStr;
use std::vec::Vec;

grammar;

match {
    // Literals:
    r"[_a-z][_a-zA-Z]*" => IDENT,
    r#""[^"]*""# => STRING,
    r"0b[01]+" => BINARYNUM,
    r"[1-9][0-9]+|[0-9]" => DECIMALNUM,
    r"0x[0-9a-fA-F]+" => HEXNUM,
    r"[+-][1-9][0-9]+|[+-][0-9]" => SIGNEDNUM,
    r"NONE|000L|090L|R180L|R270L|R000R|R090R|R180R|R270R|ALL" => SYMMETRY,

    // Symbols:
    "|" => UNION,
    "," => COMMA,
    ":" => COLON,

    // Metadata:
    ".name" => NAME,
    ".symbol" => SYMBOL,
    ".desc" => DESCRIPTION,
    ".author" => AUTHOR,
    ".license" => LICENSE,
    ".radius" => RADIUS,
    ".bgcolor" => BGCOLOR,
    ".fgcolor" => FGCOLOR,
    ".symmetries" => SYMMETRIES,
    ".field" => FIELD,
    ".parameter" => PARAMETER,

    // Instructions:
    "nop" => NOP,
    "exit" => EXIT,
    "swapsites" => SWAPSITES,
    "setsite" => SETSITE,
    "setfield" => SETFIELD,
    "setsitefield" => SETSITEFIELD,
    "getsite" => GETSITE,
    "getfield" => GETFIELD,
    "getsitefield" => GETSITEFIELD,
    "getsignedfield" => GETSIGNEDFIELD,
    "getsignedsitefield" => GETSIGNEDSITEFIELD,
    "gettype" => GETTYPE,
    "getparameter" => GETPARAMETER,
    "scan" => SCAN,
    "savesymmetries" => SAVESYMMETRIES,
    "usesymmetries" => USESYMMETRIES,
    "restoresymmetries" => RESTORESYMMETRIES,
    "push0" => PUSH0,
    "push1" => PUSH1,
    "push2" => PUSH2,
    "push3" => PUSH3,
    "push4" => PUSH4,
    "push5" => PUSH5,
    "push6" => PUSH6,
    "push7" => PUSH7,
    "push8" => PUSH8,
    "push9" => PUSH9,
    "push10" => PUSH10,
    "push11" => PUSH11,
    "push12" => PUSH12,
    "push13" => PUSH13,
    "push14" => PUSH14,
    "push15" => PUSH15,
    "push16" => PUSH16,
    "push17" => PUSH17,
    "push18" => PUSH18,
    "push19" => PUSH19,
    "push20" => PUSH20,
    "push21" => PUSH21,
    "push22" => PUSH22,
    "push23" => PUSH23,
    "push24" => PUSH24,
    "push25" => PUSH25,
    "push26" => PUSH26,
    "push27" => PUSH27,
    "push28" => PUSH28,
    "push29" => PUSH29,
    "push30" => PUSH30,
    "push31" => PUSH31,
    "push32" => PUSH32,
    "push33" => PUSH33,
    "push34" => PUSH34,
    "push35" => PUSH35,
    "push36" => PUSH36,
    "push37" => PUSH37,
    "push38" => PUSH38,
    "push39" => PUSH39,
    "push40" => PUSH40,
    "push" => PUSH,
    "pop" => POP,
    "dup" => DUP,
    "over" => OVER,
    "swap" => SWAP,
    "rot" => ROT,
    "call" => CALL,
    "ret" => RET,
    "checksum" => CHECKSUM,
    "add" => ADD,
    "sub" => SUB,
    "neg" => NEG,
    "mod" => MOD,
    "mul" => MUL,
    "div" => DIV,
    "less" => LESS,
    "lessequal" => LESSEQUAL,
    "or" => OR,
    "and" => AND,
    "xor" => XOR,
    "equal" => EQUAL,
    "bitcount" => BITCOUNT,
    "bitscanforward" => BITSCANFORWARD,
    "bitscanreverse" => BITSCANREVERSE,
    "lshift" => LSHIFT,
    "rshift" => RSHIFT,
    "jump" => JUMP,
    "jumprelativeoffset" => JUMPRELATIVEOFFSET,
    "jumpzero" => JUMPZERO,
    "jumpnonzero" => JUMPNONZERO,
    "setpaint" => SETPAINT,
    "getpaint" => GETPAINT,
    "rand" => RAND,

    // Skip whitespace and comments:
    r"\s*" => {},
    r";[^\n\r]*[\n\r]*" => {}, // `; comment`
}

Ident: &'input str = <s:IDENT> => s;

String: &'input str = <s:STRING> => &s[1..s.len()-1];

BinNum: Const = <s:BINARYNUM> => Const::from_str_radix(&s[2..], 2).unwrap();

DecNum: Const = <s:DECIMALNUM> => Const::from_str_radix(s, 10).unwrap();

HexNum: Const = <s:HEXNUM> => Const::from_str_radix(&s[2..], 16).unwrap();

SignedNum: Const = <s:SIGNEDNUM> => Const::from_str_radix(s, 10).unwrap();

ConstExpr: Const = {
    BinNum,
    DecNum,
    HexNum,
    SignedNum,
}

Symmetry: Symmetries = {
    <s:SYMMETRY> => Symmetries::from_str(s).unwrap(),
}

Symmetries: Symmetries = {
    <s:Symmetry> => s,
    <s:Symmetry> UNION <ss:Symmetries> => s | ss,
}

pub Metadata: Node<'input> = {
    NAME <i:String> => Node::Metadata(Metadata::Name(i)),
    SYMBOL <i:String> => Node::Metadata(Metadata::Symbol(i)),
    DESCRIPTION <i:String> => Node::Metadata(Metadata::Desc(i)),
    AUTHOR <i:String> => Node::Metadata(Metadata::Author(i)),
    LICENSE <i:String> => Node::Metadata(Metadata::License(i)),
    RADIUS <i:DecNum> => Node::Metadata(Metadata::Radius(i.into())),
    BGCOLOR <i:String> => Node::Metadata(Metadata::BgColor(i)),
    FGCOLOR <i:String> => Node::Metadata(Metadata::FgColor(i)),
    SYMMETRIES <s:Symmetries> => Node::Metadata(Metadata::Symmetries(s)),
    FIELD <i:Ident> COMMA <o:DECIMALNUM> COMMA <n:DECIMALNUM> => Node::Metadata(
        Metadata::Field(i, base::FieldSelector{
            offset: u8::from_str(o).unwrap(),
            length: u8::from_str(n).unwrap(),
        })),
    PARAMETER <i:Ident> <c:ConstExpr> => Node::Metadata(Metadata::Parameter(i, c)),
}

Label: Node<'input> = <i:Ident> COLON => Node::Label(i);

pub Instruction: Node<'input> = {
    NOP => Node::Instruction(Instruction::Nop),
    EXIT => Node::Instruction(Instruction::Exit),
    SWAPSITES => Node::Instruction(Instruction::SwapSites),
    SETSITE => Node::Instruction(Instruction::SetSite),
    SETFIELD <i:Ident> => Node::Instruction(Instruction::SetField(Arg::Ast(i))),
    SETSITEFIELD <i:Ident> => Node::Instruction(Instruction::SetSiteField(Arg::Ast(i))),
    GETSITE => Node::Instruction(Instruction::GetSite),
    GETFIELD <i:Ident> => Node::Instruction(Instruction::GetField(Arg::Ast(i))),
    GETSITEFIELD <i:Ident> => Node::Instruction(Instruction::GetSiteField(Arg::Ast(i))),
    GETSIGNEDFIELD <i:Ident> => Node::Instruction(Instruction::GetSignedField(Arg::Ast(i))),
    GETSIGNEDSITEFIELD <i:Ident> => Node::Instruction(Instruction::GetSignedSiteField(Arg::Ast(i))),
    GETTYPE <i:String> => Node::Instruction(Instruction::GetType(Arg::Ast(i))),
    GETPARAMETER <i:Ident> => Node::Instruction(Instruction::GetParameter(Arg::Ast(i))),
    SCAN => Node::Instruction(Instruction::Scan),
    SAVESYMMETRIES => Node::Instruction(Instruction::SaveSymmetries),
    USESYMMETRIES <s:Symmetries> => Node::Instruction(Instruction::UseSymmetries(s)),
    RESTORESYMMETRIES => Node::Instruction(Instruction::RestoreSymmetries),
    PUSH0 => Node::Instruction(Instruction::Push0),
    PUSH1 => Node::Instruction(Instruction::Push1),
    PUSH2 => Node::Instruction(Instruction::Push2),
    PUSH3 => Node::Instruction(Instruction::Push3),
    PUSH4 => Node::Instruction(Instruction::Push4),
    PUSH5 => Node::Instruction(Instruction::Push5),
    PUSH6 => Node::Instruction(Instruction::Push6),
    PUSH7 => Node::Instruction(Instruction::Push7),
    PUSH8 => Node::Instruction(Instruction::Push8),
    PUSH9 => Node::Instruction(Instruction::Push9),
    PUSH10 => Node::Instruction(Instruction::Push10),
    PUSH11 => Node::Instruction(Instruction::Push11),
    PUSH12 => Node::Instruction(Instruction::Push12),
    PUSH13 => Node::Instruction(Instruction::Push13),
    PUSH14 => Node::Instruction(Instruction::Push14),
    PUSH15 => Node::Instruction(Instruction::Push15),
    PUSH16 => Node::Instruction(Instruction::Push16),
    PUSH17 => Node::Instruction(Instruction::Push17),
    PUSH18 => Node::Instruction(Instruction::Push18),
    PUSH19 => Node::Instruction(Instruction::Push19),
    PUSH20 => Node::Instruction(Instruction::Push20),
    PUSH21 => Node::Instruction(Instruction::Push21),
    PUSH22 => Node::Instruction(Instruction::Push22),
    PUSH23 => Node::Instruction(Instruction::Push23),
    PUSH24 => Node::Instruction(Instruction::Push24),
    PUSH25 => Node::Instruction(Instruction::Push25),
    PUSH26 => Node::Instruction(Instruction::Push26),
    PUSH27 => Node::Instruction(Instruction::Push27),
    PUSH28 => Node::Instruction(Instruction::Push28),
    PUSH29 => Node::Instruction(Instruction::Push29),
    PUSH30 => Node::Instruction(Instruction::Push30),
    PUSH31 => Node::Instruction(Instruction::Push31),
    PUSH32 => Node::Instruction(Instruction::Push32),
    PUSH33 => Node::Instruction(Instruction::Push33),
    PUSH34 => Node::Instruction(Instruction::Push34),
    PUSH35 => Node::Instruction(Instruction::Push35),
    PUSH36 => Node::Instruction(Instruction::Push36),
    PUSH37 => Node::Instruction(Instruction::Push37),
    PUSH38 => Node::Instruction(Instruction::Push38),
    PUSH39 => Node::Instruction(Instruction::Push39),
    PUSH40 => Node::Instruction(Instruction::Push40),
    PUSH <c:ConstExpr> => Node::Instruction(Instruction::Push(c)),
    POP => Node::Instruction(Instruction::Pop),
    DUP => Node::Instruction(Instruction::Dup),
    OVER => Node::Instruction(Instruction::Over),
    SWAP => Node::Instruction(Instruction::Swap),
    ROT => Node::Instruction(Instruction::Rot),
    CALL <i:Ident> => Node::Instruction(Instruction::Call(Arg::Ast(i))),
    RET => Node::Instruction(Instruction::Ret),
    CHECKSUM => Node::Instruction(Instruction::Checksum),
    ADD => Node::Instruction(Instruction::Add),
    SUB => Node::Instruction(Instruction::Sub),
    NEG => Node::Instruction(Instruction::Neg),
    MOD => Node::Instruction(Instruction::Mod),
    MUL => Node::Instruction(Instruction::Mul),
    DIV => Node::Instruction(Instruction::Div),
    LESS => Node::Instruction(Instruction::Less),
    LESSEQUAL => Node::Instruction(Instruction::LessEqual),
    OR => Node::Instruction(Instruction::Or),
    AND => Node::Instruction(Instruction::And),
    XOR => Node::Instruction(Instruction::Xor),
    EQUAL => Node::Instruction(Instruction::Equal),
    BITCOUNT => Node::Instruction(Instruction::BitCount),
    BITSCANFORWARD => Node::Instruction(Instruction::BitScanForward),
    BITSCANREVERSE => Node::Instruction(Instruction::BitScanReverse),
    LSHIFT => Node::Instruction(Instruction::LShift),
    RSHIFT => Node::Instruction(Instruction::RShift),
    JUMP <i:Ident> => Node::Instruction(Instruction::Jump(Arg::Ast(i))),
    JUMPRELATIVEOFFSET => Node::Instruction(Instruction::JumpRelativeOffset),
    JUMPZERO <i:Ident> => Node::Instruction(Instruction::JumpZero(Arg::Ast(i))),
    JUMPNONZERO <i:Ident> => Node::Instruction(Instruction::JumpNonZero(Arg::Ast(i))),
    SETPAINT => Node::Instruction(Instruction::SetPaint),
    GETPAINT => Node::Instruction(Instruction::GetPaint),
    RAND => Node::Instruction(Instruction::Rand),
}

FileHeader: Vec<Node<'input>> = {
    <vs:Metadata*> => vs,
}

FileLine: Node<'input> = {
    <l:Label> => l,
    <i:Instruction> => i,
}

FileBody: Vec<Node<'input>> = {
    <vs:FileLine*> => vs,
}

pub File: File<'input> = {
    <a:FileHeader> <b:FileBody> => File{
        header: a,
        body: b,
    },
}