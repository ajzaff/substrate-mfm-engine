use std::str::FromStr;

grammar;

Ident = {
    r"[a-z]+",
};

DecimalNum: u64 = {
    "[1-9]+[0-9]*",
};

HexNum = {
    "0x" HexDigits,
};

HexDigits = {
    "[0-9a-f]+",
};

BinaryNum = {
    "0b" BinaryDigits,
};

BinaryDigits = {
    "[01]+",
};

NewLine = {
    "\n",
};

ConstExpr: () = {
    DecimalNum,
    HexNum,
    BinaryNum,
};

FieldExpr: () = {
    "$" Ident,
};

SiteNum: () = {
    r"|#[0-9]|#[1-3][0-9]|#40",
};

SiteExpr = {
    SiteNum FieldExpr?,
};

RegisterExpr = {
    r"r(\?|[0-9]|1[0-5])",
};

Argument: () = {
    FirstArgument,
    ConstExpr,
};

FirstArgument: () = {
    SiteExpr,
    RegisterExpr,
    Ident,
};

Op: () = {
    NullaryOp,
    UnaryOp,
    BinaryOp,
};

NullaryOp: String = {
    "Nop",
    "Exit",
}

UnaryOp: String = {
    "Jump",
};

BinaryOp: String = {
    "Copy",
    "Swap",
    "Scan",
    "Checksum",
    "Negate",
    "BitCount",
    "BitScanForward",
    "BitScanReverse",
    "JumpRelativeOffset",
    "JumpZero",
    "JumpNonZero",
};

TernaryOp: String = {
    "Add",
    "Sub",
    "Modulo",
    "Mod",
    "Div",
    "LessThan",
    "LessThanEqual",
    "Or",
    "And",
    "Xor",
    "Equal",
    "LShift",
    "RShift",
};

MetaOp: String = {
    ".Name",
    ".Symbol",
    ".Desc",
    ".Author",
    ".License",
    ".Radius",
    ".BgColor",
    ".FgColor",
    ".Symmetries",
    ".Field",
    ".Parameter",
};

pub Instruction: () = {
    MetaOp,
    NullaryOp,
    UnaryOp FirstArgument,
    BinaryOp FirstArgument Argument,
    TernaryOp FirstArgument Argument Argument,
};

pub CommentLine = {
    r"//.*" NewLine,
};

pub SourceLine: () = {
    CommentLine,
    Instruction CommentLine,
    Instruction NewLine,
};

pub SourceLines: () = {
    (),
    SourceLine SourceLines?,
};

pub SourceFile = {
    SourceLines,
};